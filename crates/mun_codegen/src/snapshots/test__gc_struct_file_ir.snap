---
source: crates/mun_codegen/src/test.rs
expression: "struct(gc) Foo { a: int, b: int };\n\nfn foo() {\n    let a = Foo { a: 3, b: 4 };\n    a.b += 3;\n    let b = a;\n}"
---
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i8* addrspace(4)* (i8 addrspace(4)*, i8*)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }
%Foo = type { i64, i64 }

@allocatorHandle = external global i8*
@dispatchTable = external global %DispatchTable
@global_type_table = external global [5 x %struct.MunTypeInfo addrspace(4)*]

define void @foo() {
body:
  %b5 = alloca %Foo* addrspace(4)*
  %a = alloca %Foo* addrspace(4)*
  %new_ptr = load i8* addrspace(4)* (i8 addrspace(4)*, i8*)*, i8* addrspace(4)* (i8 addrspace(4)*, i8*)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %Foo_ptr = load %struct.MunTypeInfo addrspace(4)*, %struct.MunTypeInfo addrspace(4)** getelementptr inbounds ([5 x %struct.MunTypeInfo addrspace(4)*], [5 x %struct.MunTypeInfo addrspace(4)*]* @global_type_table, i32 0, i32 0)
  %type_info_ptr_to_i8_ptr = bitcast %struct.MunTypeInfo addrspace(4)* %Foo_ptr to i8 addrspace(4)*
  %allocator_handle = load i8*, i8** @allocatorHandle
  %new = call i8* addrspace(4)* %new_ptr(i8 addrspace(4)* %type_info_ptr_to_i8_ptr, i8* %allocator_handle)
  %Foo_ptr_ptr = bitcast i8* addrspace(4)* %new to %Foo* addrspace(4)*
  %Foo_mem_ptr = load %Foo*, %Foo* addrspace(4)* %Foo_ptr_ptr
  store %Foo { i64 3, i64 4 }, %Foo* %Foo_mem_ptr
  store %Foo* addrspace(4)* %Foo_ptr_ptr, %Foo* addrspace(4)** %a
  %mem_ptr = load %Foo* addrspace(4)*, %Foo* addrspace(4)** %a
  %deref = load %Foo*, %Foo* addrspace(4)* %mem_ptr
  %Foo.b = getelementptr inbounds %Foo, %Foo* %deref, i32 0, i32 1
  %b = load i64, i64* %Foo.b
  %add = add i64 %b, 3
  %mem_ptr1 = load %Foo* addrspace(4)*, %Foo* addrspace(4)** %a
  %deref2 = load %Foo*, %Foo* addrspace(4)* %mem_ptr1
  %Foo.b3 = getelementptr inbounds %Foo, %Foo* %deref2, i32 0, i32 1
  store i64 %add, i64* %Foo.b3
  %a4 = load %Foo* addrspace(4)*, %Foo* addrspace(4)** %a
  store %Foo* addrspace(4)* %a4, %Foo* addrspace(4)** %b5
  ret void
}

