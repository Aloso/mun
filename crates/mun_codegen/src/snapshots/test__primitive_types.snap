---
source: crates/mun_codegen/src/test.rs
expression: "pub fn add(a: u8, b: u8) -> u8 { a+b }\n   pub fn less(a: u16, b: u16) -> bool { a<b }\n   pub fn greater(a: u32, b: u32) -> bool { a>b }\n   pub fn equal(a: u64, b: u64) -> bool { a==b }\n   pub fn nequal(a: u128, b: u128) -> bool { a!=b }\n   pub fn greater_equal(a: usize, b: usize) -> bool { a>=b }\n   pub fn less_equal(a: uint, b: uint) -> bool { a<=b }\n\n   pub fn iadd(a: i8, b: i8) -> i8 { a+b }\n   pub fn iless(a: i16, b: i16) -> bool { a<b }\n   pub fn igreater(a: i32, b: i32) -> bool { a>b }\n   pub fn iequal(a: i64, b: i64) -> bool { a==b }\n   pub fn inequal(a: i128, b: i128) -> bool { a!=b }\n   pub fn igreater_equal(a: isize, b: isize) -> bool { a>=b }\n   pub fn iless_equal(a: int, b: int) -> bool { a<=b }"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [11 x %struct.MunTypeInfo addrspace(4)*]

define i8 @add(i8, i8) {
body:
  %add = add i8 %0, %1
  ret i8 %add
}

define i1 @less(i16, i16) {
body:
  %less = icmp ult i16 %0, %1
  ret i1 %less
}

define i1 @greater(i32, i32) {
body:
  %greater = icmp ugt i32 %0, %1
  ret i1 %greater
}

define i1 @equal(i64, i64) {
body:
  %eq = icmp eq i64 %0, %1
  ret i1 %eq
}

define i1 @nequal(i128, i128) {
body:
  %neq = icmp ne i128 %0, %1
  ret i1 %neq
}

define i1 @greater_equal(i64, i64) {
body:
  %greatereq = icmp uge i64 %0, %1
  ret i1 %greatereq
}

define i1 @less_equal(i64, i64) {
body:
  %lesseq = icmp ule i64 %0, %1
  ret i1 %lesseq
}

define i8 @iadd(i8, i8) {
body:
  %add = add i8 %0, %1
  ret i8 %add
}

define i1 @iless(i16, i16) {
body:
  %less = icmp slt i16 %0, %1
  ret i1 %less
}

define i1 @igreater(i32, i32) {
body:
  %greater = icmp sgt i32 %0, %1
  ret i1 %greater
}

define i1 @iequal(i64, i64) {
body:
  %eq = icmp eq i64 %0, %1
  ret i1 %eq
}

define i1 @inequal(i128, i128) {
body:
  %neq = icmp ne i128 %0, %1
  ret i1 %neq
}

define i1 @igreater_equal(i64, i64) {
body:
  %greatereq = icmp sge i64 %0, %1
  ret i1 %greatereq
}

define i1 @iless_equal(i64, i64) {
body:
  %lesseq = icmp sle i64 %0, %1
  ret i1 %lesseq
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i16>::name" = private unnamed_addr constant [10 x i8] c"core::i16\00"
@"type_info::<core::i16>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\05\CD|\F8Bv\D8\B1\E8\8B\8C\D8\8D\B5\89\B0", [10 x i8]* @"type_info::<core::i16>::name", i32 16, i8 2, i8 0 }
@"type_info::<core::i32>::name" = private unnamed_addr constant [10 x i8] c"core::i32\00"
@"type_info::<core::i32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\17yzt\19\D62\17\D25\95C\17\88[\FA", [10 x i8]* @"type_info::<core::i32>::name", i32 32, i8 4, i8 0 }
@"type_info::<core::u16>::name" = private unnamed_addr constant [10 x i8] c"core::u16\00"
@"type_info::<core::u16>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"0\01\BC\BBK\E0\F2\7F&l\01\CD|q\F2\B3", [10 x i8]* @"type_info::<core::u16>::name", i32 16, i8 2, i8 0 }
@"type_info::<core::i64>::name" = private unnamed_addr constant [10 x i8] c"core::i64\00"
@"type_info::<core::i64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"G\13;t\97j8\18\D7M\83`\1D\C8\19%", [10 x i8]* @"type_info::<core::i64>::name", i32 64, i8 8, i8 0 }
@"type_info::<core::u32>::name" = private unnamed_addr constant [10 x i8] c"core::u32\00"
@"type_info::<core::u32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"daz5d\A6\BE\88\81=&Y\A1+\C6\1D", [10 x i8]* @"type_info::<core::u32>::name", i32 32, i8 4, i8 0 }
@"type_info::<core::bool>::name" = private unnamed_addr constant [11 x i8] c"core::bool\00"
@"type_info::<core::bool>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"x\82\81m t7\03\CB\F8k\81-;\C9\84", [11 x i8]* @"type_info::<core::bool>::name", i32 1, i8 1, i8 0 }
@"type_info::<core::u8>::name" = private unnamed_addr constant [9 x i8] c"core::u8\00"
@"type_info::<core::u8>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\A0y\A7S\B6(n\F7f&H\E1\F9\AD\04>", [9 x i8]* @"type_info::<core::u8>::name", i32 8, i8 1, i8 0 }
@"type_info::<core::u64>::name" = private unnamed_addr constant [10 x i8] c"core::u64\00"
@"type_info::<core::u64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\A6\E7g \D1\8B\1Aq`\1F\1E\07\BB5@q", [10 x i8]* @"type_info::<core::u64>::name", i32 64, i8 8, i8 0 }
@"type_info::<core::i128>::name" = private unnamed_addr constant [11 x i8] c"core::i128\00"
@"type_info::<core::i128>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\BDkp\09RRM\EBc\02\A0\DB47\A7\E3", [11 x i8]* @"type_info::<core::i128>::name", i32 128, i8 8, i8 0 }
@"type_info::<core::u128>::name" = private unnamed_addr constant [11 x i8] c"core::u128\00"
@"type_info::<core::u128>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\E67\1BU\E9k\95\93d\14}\1C\96S\95\F0", [11 x i8]* @"type_info::<core::u128>::name", i32 128, i8 8, i8 0 }
@"type_info::<core::i8>::name" = private unnamed_addr constant [9 x i8] c"core::i8\00"
@"type_info::<core::i8>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\EF\C4\B1Z\E7\12\B1\91q\F1\0B\80U\FC\A6\0F", [9 x i8]* @"type_info::<core::i8>::name", i32 8, i8 1, i8 0 }
@global_type_table = global [11 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i16>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i32>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::u16>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::u32>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::bool>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::u8>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::u64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i128>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::u128>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i8>"]

