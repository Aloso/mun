---
source: crates/mun_codegen/src/test.rs
expression: "struct(value) Value(int, int);\nstruct(gc) Heap(float, float);\n\npub fn assign_value(a: Value, b: Value) -> Value {\n    a = b;\n    a\n}\n\npub fn assign_heap(a: Heap, b: Heap) -> Heap {\n    a = b;\n    a\n}\n// TODO: Add errors\n// a += b;\n// a *= b;\n// a -= b;\n// a /= b;\n// a %= b;"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i8* addrspace(4)* (i8 addrspace(4)*, i8*)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }
%Value = type { i64, i64 }
%Heap = type { double, double }

@allocatorHandle = external global i8*
@dispatchTable = external global %DispatchTable
@global_type_table = external global [7 x %struct.MunTypeInfo addrspace(4)*]

define %Value @assign_value(%Value, %Value) {
body:
  %.fca.0.extract3 = extractvalue %Value %1, 0
  %.fca.1.extract4 = extractvalue %Value %1, 1
  ret %Value %1
}

define %Value* addrspace(4)* @assign_value_wrapper(%Value* addrspace(4)*, %Value* addrspace(4)*) {
body:
  %mem_ptr = load %Value*, %Value* addrspace(4)* %0
  %deref = load %Value, %Value* %mem_ptr
  %mem_ptr1 = load %Value*, %Value* addrspace(4)* %1
  %deref2 = load %Value, %Value* %mem_ptr1
  %assign_value = call %Value @assign_value(%Value %deref, %Value %deref2)
  %new_ptr = load i8* addrspace(4)* (i8 addrspace(4)*, i8*)*, i8* addrspace(4)* (i8 addrspace(4)*, i8*)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %Value_ptr = load %struct.MunTypeInfo addrspace(4)*, %struct.MunTypeInfo addrspace(4)** getelementptr inbounds ([7 x %struct.MunTypeInfo addrspace(4)*], [7 x %struct.MunTypeInfo addrspace(4)*]* @global_type_table, i32 0, i32 3)
  %type_info_ptr_to_i8_ptr = bitcast %struct.MunTypeInfo addrspace(4)* %Value_ptr to i8 addrspace(4)*
  %allocator_handle = load i8*, i8** @allocatorHandle
  %new = call i8* addrspace(4)* %new_ptr(i8 addrspace(4)* %type_info_ptr_to_i8_ptr, i8* %allocator_handle)
  %Value_ptr_ptr = bitcast i8* addrspace(4)* %new to %Value* addrspace(4)*
  %Value_mem_ptr = load %Value*, %Value* addrspace(4)* %Value_ptr_ptr
  store %Value %assign_value, %Value* %Value_mem_ptr
  ret %Value* addrspace(4)* %Value_ptr_ptr
}

define %Heap* addrspace(4)* @assign_heap(%Heap* addrspace(4)*, %Heap* addrspace(4)*) {
body:
  ret %Heap* addrspace(4)* %1
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%DispatchTable = type { i8* addrspace(4)* (i8 addrspace(4)*, i8*)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }
%struct.MunStructInfo = type { i8 addrspace(4)* addrspace(4)*, %struct.MunTypeInfo addrspace(4)* addrspace(4)*, i16 addrspace(4)*, i16, i8 }

@dispatchTable = global %DispatchTable zeroinitializer
@"type_info::<*const TypeInfo>::name" = private unnamed_addr constant [16 x i8] c"*const TypeInfo\00"
@"type_info::<*const TypeInfo>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"=\A1-\1F\C2\A7\88`d\90\F4\B5\BEE}x", [16 x i8]* @"type_info::<*const TypeInfo>::name", i32 64, i8 8, i8 0 }
@"type_info::<core::i64>::name" = private unnamed_addr constant [10 x i8] c"core::i64\00"
@"type_info::<core::i64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"G\13;t\97j8\18\D7M\83`\1D\C8\19%", [10 x i8]* @"type_info::<core::i64>::name", i32 64, i8 8, i8 0 }
@"type_info::<core::f64>::name" = private unnamed_addr constant [10 x i8] c"core::f64\00"
@"type_info::<core::f64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"`\DBF\9C?YJ%G\AD4\9F\D5\92%A", [10 x i8]* @"type_info::<core::f64>::name", i32 64, i8 8, i8 0 }
@"type_info::<Value>::name" = private unnamed_addr constant [6 x i8] c"Value\00"
@"struct_info::<Value>::field_names" = private unnamed_addr constant [2 x i8] c"0\00"
@"struct_info::<Value>::field_names.1" = private unnamed_addr constant [2 x i8] c"1\00"
@0 = private unnamed_addr constant [2 x i8 addrspace(4)*] [i8 addrspace(4)* @"struct_info::<Value>::field_names", i8 addrspace(4)* @"struct_info::<Value>::field_names.1"]
@"struct_info::<Value>::field_types" = private unnamed_addr constant [2 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>"]
@"struct_info::<Value>::field_offsets" = private unnamed_addr constant [2 x i16] [i16 0, i16 8]
@"type_info::<Value>" = private unnamed_addr constant { %struct.MunTypeInfo, %struct.MunStructInfo } { %struct.MunTypeInfo { [16 x i8] c"ub,\CA\DB\C8\15\93'Q\F0\ECY\E6\E8v", [6 x i8]* @"type_info::<Value>::name", i32 128, i8 8, i8 1 }, %struct.MunStructInfo { [2 x i8 addrspace(4)*]* @0, [2 x %struct.MunTypeInfo addrspace(4)*]* @"struct_info::<Value>::field_types", [2 x i16]* @"struct_info::<Value>::field_offsets", i16 2, i8 1 } }
@"type_info::<*const *mut core::void>::name" = private unnamed_addr constant [23 x i8] c"*const *mut core::void\00"
@"type_info::<*const *mut core::void>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\C5fO\BD\84\DF\06\BFd+\B1\9Abv\CE\00", [23 x i8]* @"type_info::<*const *mut core::void>::name", i32 64, i8 8, i8 0 }
@"type_info::<Heap>::name" = private unnamed_addr constant [5 x i8] c"Heap\00"
@"struct_info::<Heap>::field_names" = private unnamed_addr constant [2 x i8] c"0\00"
@"struct_info::<Heap>::field_names.2" = private unnamed_addr constant [2 x i8] c"1\00"
@1 = private unnamed_addr constant [2 x i8 addrspace(4)*] [i8 addrspace(4)* @"struct_info::<Heap>::field_names", i8 addrspace(4)* @"struct_info::<Heap>::field_names.2"]
@"struct_info::<Heap>::field_types" = private unnamed_addr constant [2 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::f64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::f64>"]
@"struct_info::<Heap>::field_offsets" = private unnamed_addr constant [2 x i16] [i16 0, i16 8]
@"type_info::<Heap>" = private unnamed_addr constant { %struct.MunTypeInfo, %struct.MunStructInfo } { %struct.MunTypeInfo { [16 x i8] c"\C9\B1\99\D7\18\A3Z\B8\1EL7a1\03\F7L", [5 x i8]* @"type_info::<Heap>::name", i32 128, i8 8, i8 1 }, %struct.MunStructInfo { [2 x i8 addrspace(4)*]* @1, [2 x %struct.MunTypeInfo addrspace(4)*]* @"struct_info::<Heap>::field_types", [2 x i16]* @"struct_info::<Heap>::field_offsets", i16 2, i8 0 } }
@"type_info::<*mut core::void>::name" = private unnamed_addr constant [16 x i8] c"*mut core::void\00"
@"type_info::<*mut core::void>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\F0Y\22\FC\95\9E\7F\CE\08T\B1\A2\CD\A7\FAz", [16 x i8]* @"type_info::<*mut core::void>::name", i32 64, i8 8, i8 0 }
@global_type_table = global [7 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<*const TypeInfo>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<core::f64>", %struct.MunTypeInfo addrspace(4)* @"type_info::<Value>", %struct.MunTypeInfo addrspace(4)* @"type_info::<*const *mut core::void>", %struct.MunTypeInfo addrspace(4)* @"type_info::<Heap>", %struct.MunTypeInfo addrspace(4)* @"type_info::<*mut core::void>"]
@allocatorHandle = unnamed_addr global i8* null

