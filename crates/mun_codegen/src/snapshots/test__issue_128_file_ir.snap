---
source: crates/mun_codegen/src/test.rs
expression: "// resources/script.mun\nextern fn thing(n: int);\nextern fn print(n: int) -> int;\n\npub fn main() {\n    // 1st\n    print(1);\n    thing(5);\n\n    // 2nd\n    print(2);\n    thing(78);\n}"
---
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i64 (i64)*, void (i64)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@dispatchTable = external global %DispatchTable
@global_type_table = external global [1 x %struct.MunTypeInfo addrspace(4)*]

define void @main() {
body:
  %print_ptr = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %print = call i64 %print_ptr(i64 1)
  %thing_ptr = load void (i64)*, void (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 1)
  call void %thing_ptr(i64 5)
  %print_ptr1 = load i64 (i64)*, i64 (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %print2 = call i64 %print_ptr1(i64 2)
  %thing_ptr3 = load void (i64)*, void (i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 1)
  call void %thing_ptr3(i64 78)
  ret void
}

