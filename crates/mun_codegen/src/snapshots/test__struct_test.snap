---
source: crates/mun_codegen/src/test.rs
expression: "struct(value) Bar(float, int, bool, Foo);\nstruct(value) Foo { a: int };\nstruct(value) Baz;\nfn foo() {\n    let a: Foo = Foo { a: 5 };\n    let b: Bar = Bar(1.23, a.a, true, a);\n    let c: Baz = Baz;\n}"
---
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i8* (i8 addrspace(4)*, i8 addrspace(4)*)* }
%Baz = type {}
%Bar = type { double, i64, i1, %Foo }
%Foo = type { i64 }

@dispatchTable = global %DispatchTable zeroinitializer

define void @foo() {
body:
  %c = alloca %Baz
  %b = alloca %Bar
  %a = alloca %Foo
  store %Foo { i64 5 }, %Foo* %a
  %Foo.a = getelementptr inbounds %Foo, %Foo* %a, i32 0, i32 0
  %a1 = load i64, i64* %Foo.a
  %a2 = load %Foo, %Foo* %a
  %init = insertvalue %Bar { double 1.230000e+00, i64 undef, i1 undef, %Foo undef }, i64 %a1, 1
  %init3 = insertvalue %Bar %init, i1 true, 2
  %init4 = insertvalue %Bar %init3, %Foo %a2, 3
  store %Bar %init4, %Bar* %b
  store %Baz undef, %Baz* %c
  ret void
}

