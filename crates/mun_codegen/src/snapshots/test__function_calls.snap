---
source: crates/mun_codegen/src/test.rs
expression: "fn add_impl(a:int, b:int) -> int {\n    a+b\n}\n\nfn add(a:int, b:int) -> int {\n  add_impl(a,b)\n}\n\npub fn test() -> int {\n  add(4,5)\n  add_impl(4,5)\n  add(4,5)\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%DispatchTable = type { i64 (i64, i64)*, i64 (i64, i64)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@dispatchTable = external global %DispatchTable
@global_type_table = external global [1 x %struct.MunTypeInfo addrspace(4)*]

define i64 @add_impl(i64, i64) {
body:
  %add = add i64 %0, %1
  ret i64 %add
}

define i64 @add(i64, i64) {
body:
  %add_impl_ptr = load i64 (i64, i64)*, i64 (i64, i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 1)
  %add_impl = call i64 %add_impl_ptr(i64 %0, i64 %1)
  ret i64 %add_impl
}

define i64 @test() {
body:
  %add_ptr = load i64 (i64, i64)*, i64 (i64, i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %add = call i64 %add_ptr(i64 4, i64 5)
  %add_impl_ptr = load i64 (i64, i64)*, i64 (i64, i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 1)
  %add_impl = call i64 %add_impl_ptr(i64 4, i64 5)
  %add_ptr1 = load i64 (i64, i64)*, i64 (i64, i64)** getelementptr inbounds (%DispatchTable, %DispatchTable* @dispatchTable, i32 0, i32 0)
  %add2 = call i64 %add_ptr1(i64 4, i64 5)
  ret i64 %add2
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%DispatchTable = type { i64 (i64, i64)*, i64 (i64, i64)* }
%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@dispatchTable = global %DispatchTable { i64 (i64, i64)* @add, i64 (i64, i64)* @add_impl }
@"type_info::<core::i64>::name" = private unnamed_addr constant [10 x i8] c"core::i64\00"
@"type_info::<core::i64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"G\13;t\97j8\18\D7M\83`\1D\C8\19%", [10 x i8]* @"type_info::<core::i64>::name", i32 64, i8 8, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>"]

declare i64 @add(i64, i64)

declare i64 @add_impl(i64, i64)

