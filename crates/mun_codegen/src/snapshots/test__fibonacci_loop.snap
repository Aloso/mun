---
source: crates/mun_codegen/src/test.rs
expression: "pub fn fibonacci(n:int) -> int {\n    let a = 0;\n    let b = 1;\n    let i = 1;\n    loop {\n        if i > n {\n            return a\n        }\n        let sum = a + b;\n        a = b;\n        b = sum;\n        i += 1;\n    }\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo addrspace(4)*]

define i64 @fibonacci(i64) {
body:
  br label %loop

loop:                                             ; preds = %if_merge, %body
  %b.0 = phi i64 [ 1, %body ], [ %add, %if_merge ]
  %a.0 = phi i64 [ 0, %body ], [ %b.0, %if_merge ]
  %i.0 = phi i64 [ 1, %body ], [ %add11, %if_merge ]
  %greater = icmp sgt i64 %i.0, %0
  br i1 %greater, label %then, label %if_merge

then:                                             ; preds = %loop
  ret i64 %a.0

if_merge:                                         ; preds = %loop
  %add = add i64 %a.0, %b.0
  %add11 = add i64 %i.0, 1
  br label %loop
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i64>::name" = private unnamed_addr constant [10 x i8] c"core::i64\00"
@"type_info::<core::i64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"G\13;t\97j8\18\D7M\83`\1D\C8\19%", [10 x i8]* @"type_info::<core::i64>::name", i32 64, i8 8, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>"]

