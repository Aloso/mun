---
source: crates/mun_codegen/src/test.rs
expression: "pub fn foo(a:int) -> int {\n    let a = a+1;\n    {\n        let a = a+2;\n    }\n    a+3\n}\n\npub fn bar(a:int) -> int {\n    let a = a+1;\n    let a = {\n        let a = a+2;\n        a\n    }\n    a+3\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo addrspace(4)*]

define i64 @foo(i64) {
body:
  %add = add i64 %0, 1
  %add7 = add i64 %add, 3
  ret i64 %add7
}

define i64 @bar(i64) {
body:
  %add = add i64 %0, 1
  %add4 = add i64 %add, 2
  %add9 = add i64 %add4, 3
  ret i64 %add9
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8 addrspace(4)*, i32, i8, i8 }

@"type_info::<core::i64>::name" = private unnamed_addr constant [10 x i8] c"core::i64\00"
@"type_info::<core::i64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"G\13;t\97j8\18\D7M\83`\1D\C8\19%", [10 x i8]* @"type_info::<core::i64>::name", i32 64, i8 8, i8 0 }
@global_type_table = global [1 x %struct.MunTypeInfo addrspace(4)*] [%struct.MunTypeInfo addrspace(4)* @"type_info::<core::i64>"]

